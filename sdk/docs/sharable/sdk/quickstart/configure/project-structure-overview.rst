=================================================
Canton Network quickstart project structure guide
=================================================

[1]_ 
[2]_ 
[3]_ 
[4]_ 
[5]_ 
[6]_ 
[7]_ 
[8]_ 
[9]_ 
[10]_ 
[11]_ 
[12]_ 
[13]_ 
[14]_ 
[15]_ 
[16]_ 
[17]_ 
[18]_ 
[19]_ 
[20]_ 
[21]_ 
[22]_ 
[23]_ 
[24]_ 
[25]_ 
[26]_ 
[27]_ 
[28]_ 
[29]_ 
[30]_ 
[31]_ 
[32]_ 
[33]_ 
[34]_ 
[35]_ 
[36]_ 
[37]_ 
[38]_ 
[39]_ 
[40]_ 
[41]_ 


.. [1]
   https://docs.daml.com/ and https://dev.network.canton.global/index.html

.. [2]
   https://www.digitalasset.com/training-and-certification

.. [3]
   https://daml.talentlms.com/catalog/info/id:160

.. [4]
   https://www.canton.network/blog/canton-coin-a-canton-network-native-payment-application

.. [5]
   While writing this guide, the author’s Docker configuration was 10 CPUs & 25GB RAM

.. [6]
   https://nixos.org/download/

.. [7]
   https://direnv.net/

.. [8]
   https://docs.docker.com/compose/

.. [9]
   https://nixos.wiki/wiki/Development_environment_with_nix-shell

.. [10]
   https://nix.dev/tutorials/first-steps/declarative-shell.html

.. [11]
   https://nixos.org/manual/nixpkgs/stable/#sec-tools-of-stdenv

.. [12]
   This wrapper also contains convenience functions to download and install the correct version of the Daml SDK.

.. [13]
   https://www.oreilly.com/openbook/make3/book/index.csp

.. [14]
   The Makefile is written to be self-documenting, this includes autogenerating “usage” as a default help target

.. [15]
   `Canton Quickstart Project Structure <https://docs.google.com/document/d/1DsmvBBP5Ldlzq76bdVvH05UYQRRHLtu5zCEs-fIDAic/edit?tab=t.0#bookmark=id.ajegdjdt1k5e>`__
   Short Makefile Primer

.. [16]
   https://docs.docker.com/

.. [17]
   https://docs.docker.com/compose/

.. [18]
   This is also where you should expect to find any automation, integration, and other off-ledger components

.. [19]
   https://daml.talentlms.com/catalog/info/id:152 currently part of the Daml Philosophy Certification
   https://daml.talentlms.com/catalog/info/id:149

.. [20]
   In particular the Solution Topology course https://daml.talentlms.com/catalog/info/id:161 within the larger TSA
   certification https://daml.talentlms.com/catalog/info/id:160

.. [21]
   Most make targets can be located by searching/grepping for ^target:.
   The main exceptions to this are the open-\* targets which are
   cross-platform and generated by macro at the end of the file.

.. [22]
   Found in docker/utils.sh

.. [23]
   https://docs.daml.com/tools/daml-shell/index.html#daml-shell-daml-shell

.. [24]
   https://docs.daml.com/daml/patterns/propose-accept.html

.. [25]
   `https://docs.sync.global/index.html <https://docs.dev.sync.global/index.html>`__

.. [26]
   https://docs.daml.com/query/pqs-user-guide.html#pqs

.. [27]
   https://www.openapis.org/

.. [28]
   As defined by Roy Fielding
   (https://ics.uci.edu/~fielding/pubs/dissertation/top.htm)

.. [29]
   Contract-ids and their underlying contract are nouns and can be
   represented as ReST resources. However, not only does this fail to
   capture the ongoing business entity that often outlives any single
   contract, it misses the fact that at the core of Daml are the
   authorized choices which are verbs and therefore do not play nicely
   with ReST assumptions.

.. [30]
   https://spring.io/projects/spring-boot

.. [31]
   Topic 9
   https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/
   “Don’t Repeat Yourself”

.. [32]
   The CQRS alternative architecture does not use DTOs. Instead the
   backend services return Daml contracts directly. These are then
   generally deserialised directly into Javascript or Typescript
   objects, generated directly from the DAR files; and, used to populate
   the underlying frontend model. This direct coupling from Daml to
   Frontend can significantly simplify the code required for
   applications with requirements defined in terms of a Daml model. The
   mediated architecture is more suitable where the Frontend needs to
   incorporate sources of data additional to the Canton Ledger.

.. [33]
   https://react.dev/

.. [34]
   https://www.typescriptlang.org/

.. [35]
   This is being changed to use keycloak as the JST server.

.. [36]
   https://en.wikipedia.org/wiki/Make_(software)

.. [37]
   https://www.gnu.org/software/make/manual/html_node/index.html

.. [38]
   https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html

.. [39]
   https://www.gnu.org/software/make/manual/html_node/Multi_002dLine.html

.. [40]
   https://www.gnu.org/software/make/manual/html_node/Call-Function.html

.. [41]
   https://www.gnu.org/software/make/manual/html_node/Eval-Function.html
