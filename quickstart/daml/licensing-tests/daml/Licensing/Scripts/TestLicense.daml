-- | Test for renewing license
module Licensing.Scripts.TestLicense where

import DA.Action (unless, void)
import qualified DA.Map as Map
import DA.Date
import DA.Time

import Daml.Script
import DA.Foldable (mapA_)


import Splice.Amulet

import Splice.Scripts.Util

import Licensing.AppInstall
import Licensing.License
import Licensing.Util
import Splice.Wallet.Payment
import Splice.Scripts.TestWallet

test : Script ()
test = do
  app@LicensingApp{..} <- setupLicensingApp
  setupLicensingInstall app alice

  -- start with 200 USD worth of CC
  void $ tap amuletApp provider 200.0
  checkProviderBalance app 200.0

  -- setup license expiredAt (now = 2022-01-01T00:00:00Z)
  licenseId <- setupLicense app alice
  -- advance time to 2022-01-11T00:00:00Z (10 days) to simulate renewal base is right when renewed
  passTime (days 10)

  -- First renewal - Initial --
  -- renew license for a year for fee of 20.0 USD worth of CC
  (_, paymentRequestId)  <- renewLicense app licenseId 20.0 $ days 365

  checkBalance app alice 1.0
  amulet <- tap amuletApp alice 64.0

  acceptPaymentRequest amuletApp alice provider.primaryParty None paymentRequestId amulet

  completeAllAcceptedTransfers amuletApp provider

  (_, license) <- getLicense provider

  unless (license.expiresAt == time (date 2023 Jan 11) 0 0 0) $
    fail $ "Expected license to expire on 2023-01-11T00:00:00Z but got " <> show license.expiresAt

  checkProviderBalance app 220.0
  checkBalance app alice 45.0

  -- Second renewal - Extension --

  (licenseId, _) <- getLicense provider
  -- advance time to 2022-07-01T00:00:00Z (171 days) to midyear sale and addition of extension to license
  passTime (days 171)
  -- renew license for another year this time for fee of 10.0 USD (midyear sale) worth of CC
  (_, paymentRequestIdA)  <- renewLicense app licenseId 10.0 $ days 365
  amuletA <- tap amuletApp alice 20.0
  -- second concurrent renew license for another year to take advantage of the sale
  -- 366 days to simulate leap year
  (_, paymentRequestIdB)  <- renewLicense app licenseId 10.0 $ days 366
  amuletB <- tap amuletApp alice 20.0

  acceptPaymentRequest amuletApp alice provider.primaryParty None paymentRequestIdA amuletA
  acceptPaymentRequest amuletApp alice provider.primaryParty None paymentRequestIdB amuletB

  completeAllAcceptedTransfers amuletApp provider
  
  checkProviderBalance app 240.0
  checkBalance app alice 65.0

  (_, license) <- getLicense alice

  unless (license.expiresAt == time (date 2025 Jan 11) 0 0 0) $
    fail $ "Expected license to expire on 2025-01-11T00:00:00Z but got " <> show license.expiresAt

  -- Thrid renewal - Rejection --

  (licenseId, _) <- getLicense alice
  -- advance time to 2022-12-31T00:00:00Z (183 days) to end of year sale and rejection of payment
  passTime (days 183)
  -- renew license for another year this time for fee of 10.0 USD (end of year sale) worth of CC
  (renewalRequestId, paymentRequestId)  <- renewLicense app licenseId 10.0 $ days 365
  -- reject the request
  rejectPaymentRequest app alice renewalRequestId paymentRequestId

  -- ensure the payment and renewal request are archived
  [] <- query @AppPaymentRequest alice.primaryParty
  [] <- query @LicenseRenewalRequest alice.primaryParty

  -- balance should remain the same
  checkProviderBalance app 240.0
  checkBalance app alice 65.0

  -- Fourth renewal - payment request expires --

  -- renew license for another year this time for fee of 10.0 USD (end of year sale) worth of CC
  (renewalRequestId, paymentRequestId) <- renewLicense app licenseId 10.0 $ days 365
  -- advance time to 2023-01-09T00:00:00Z (10 days) to expire the payment acceptance and reject it
  passTime (days 10)

  expirePaymentRequest app renewalRequestId paymentRequestId

  -- ensure the payment and renewal request are archived
  [] <- query @AppPaymentRequest alice.primaryParty
  [] <- query @LicenseRenewalRequest alice.primaryParty

  -- balance should remain the same
  checkProviderBalance app 240.0
  checkBalance app alice 65.0
  

-- Testing utilities: setup
---------------------------

data LicensingApp = LicensingApp with
  dso : Party
  amuletApp : AmuletApp
  provider : AmuletUser
  alice : AmuletUser
  bob : AmuletUser

setupLicensingApp : Script LicensingApp
setupLicensingApp = do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers
  provider <- setupValidatorParty app "provider"
  featureApp app provider

  pure $ LicensingApp with
    dso       = app.dso
    amuletApp = app
    provider
    alice
    bob

setupLicensingInstall : LicensingApp -> AmuletUser -> Script ()
setupLicensingInstall app user = do
  -- User submits the app install request using the curl command displayed on
  -- provider's Web UI against users' validator node using the JWT token from
  -- the users' IAM
  requestId <- submit user.primaryParty do
    createCmd AppInstallRequest with
      dso       = app.dso
      provider  = app.provider.primaryParty
      user      = user.primaryParty
      meta      = emptyMetadata

  -- A trigger running on the provider backend will pick up the request and
  -- accept it provided the user party is known and there is no install yet
  -- for the party. It also associated the provider user-id with the install
  -- for disambiguation purposes.
  void $ submit app.provider.primaryParty do
    exerciseCmd requestId AppInstallRequest_Accept with
      meta        = emptyMetadata
      installMeta = Metadata with
        values = Map.fromList [("providerUserId", "<user-id>")]

-- | Simulate the setup of the validator party on a self-hosted validator node.
setupValidatorParty : AmuletApp -> Text -> Script AmuletUser
setupValidatorParty app name = do
  party  <- allocatePartyWithHint name $ PartyIdHint name
  userId <- validateUserId name
  -- We need 'CanReadAs app.dso' only in tests, as they are not yet setup to simulate explicit disclosure.
  -- In the actual implementation, the provider backend would provide the DSO published contracts via explicit disclosure.
  -- TODO: get rid of this hack as part of the CN token standard integration
  createUser (User userId (Some party)) [CanActAs party, CanReadAs app.dso]
  -- the validator party is its own validator and can thus claim all its validator rewards
  recordValidatorOf app party party
  pure $ AmuletUser userId party


setupLicense : LicensingApp -> AmuletUser -> Script (ContractId License)
setupLicense app user = do
    installId <- getInstall
    -- need: readAs dso to simulate explicit disclosure of AmuletRules and OpenMiningRound 
    result <- submitMulti [app.provider.primaryParty] [app.dso] do
      exerciseCmd installId AppInstall_CreateLicense with
        params = licenseParams
    pure result.licenseId
  where
    getInstall : Script (ContractId AppInstall)
    getInstall = do
      [(installId, _)] <- query @AppInstall user.primaryParty
      pure installId
    licenseParams = LicenseParams with
      meta = Metadata with
        values = Map.fromList [("licenseId", "<dummy-uuid>")]

renewLicense : LicensingApp -> ContractId License -> Decimal -> RelTime -> Script (ContractId LicenseRenewalRequest, ContractId AppPaymentRequest)
renewLicense app licenseId licenseFeeCc licenseExtensionDuration = submit app.provider.primaryParty do
  exerciseCmd licenseId License_Renew with
    licenseFeeCc
    licenseExtensionDuration
    paymentAcceptanceDuration = days 1
    description = "Renewal of the license"


expirePaymentRequest : LicensingApp -> ContractId LicenseRenewalRequest -> ContractId AppPaymentRequest  -> Script ()
expirePaymentRequest app renewalRequestId paymentRequestId = do
  -- AppPaymentRequest_Expire is a choice that verifies that the payment request is expired
  submit app.provider.primaryParty do
    exerciseCmd paymentRequestId AppPaymentRequest_Expire with actor = app.provider.primaryParty
  void $ submit app.provider.primaryParty do
    exerciseCmd renewalRequestId LicenseRenewalRequest_Cancel with 
      actor = app.provider.primaryParty
      meta  = Metadata with values = Map.fromList [("reason", "Payment request expired")]

completeAllAcceptedTransfers : AmuletApp -> AmuletUser -> Script ()
completeAllAcceptedTransfers app provider = do
    allAccepted <- query @AcceptedAppPayment provider.primaryParty
    transferContext <- getAppTransferContext app provider
    mapA_ (consumeAllAcceptedTransfers transferContext) $ fst <$> allAccepted
  where
    consumeAllAcceptedTransfers transferContext acceptedPaymentCid = do
      (licenseCid, _)                     <- getLicense provider
      Some AcceptedAppPayment{reference}  <- queryContractId provider.primaryParty acceptedPaymentCid
      [(renewalRequestCid, _)]            <- 
        queryFilter @LicenseRenewalRequest provider.primaryParty $ \c -> c.reference == reference
      submitUser provider.userId do 
        exerciseCmd renewalRequestCid LicenseRenewalRequest_CompleteRenewal with ..

rejectPaymentRequest : LicensingApp -> AmuletUser -> ContractId LicenseRenewalRequest -> ContractId AppPaymentRequest -> Script ()
rejectPaymentRequest app sender renewalRequestId paymentRequest = do
  submit sender.primaryParty do exerciseCmd paymentRequest AppPaymentRequest_Reject
  void $ submit app.provider.primaryParty do
    exerciseCmd renewalRequestId LicenseRenewalRequest_Cancel with 
      actor = app.provider.primaryParty
      meta  = Metadata with values = Map.fromList [("reason", "Payment rejected")]
  

getLicense : AmuletUser -> Script (ContractId License, License)
getLicense user = do
  [license] <- query @License user.primaryParty
  pure license
  

-- Testing utilities: assertions
--------------------------------

checkProviderBalance : LicensingApp -> Decimal -> Script ()
checkProviderBalance app approximateBalance = do
  checkBalance app app.provider approximateBalance

checkBalance : LicensingApp -> AmuletUser -> Decimal -> Script ()
checkBalance app user approximateBalance = do
    runAmuletDepositBots app.amuletApp
    [(_, coin)] <- query @Amulet user.primaryParty
    assertCloseTo coin.amount.initialAmount $ show user.userId <> " balance of "
  where
    minBalance = approximateBalance - 1.0
    maxBalance = approximateBalance + 1.0
    
    assertCloseTo : Decimal -> Text  -> Script ()
    assertCloseTo actualAmount  description =
      unless (actualAmount >= minBalance && actualAmount <= maxBalance) $
        fail $ description <> show actualAmount <> " is not within the expected range [" <> show minBalance <> ", " <> show maxBalance <> "]"