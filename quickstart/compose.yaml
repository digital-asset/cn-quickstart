# Copyright (c) 2023, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

---
x-vars:
  default-logging: &default-logging
    driver: "fluentd"
    options:
      fluentd-address: "localhost:${OTEL_COLLECTOR_FLUENTD_PORT}"
      fluentd-async: "true"

  canton-metrics-config: &canton-metrics-config |
    ADDITIONAL_CONFIG_MONITORING=
      canton.monitoring.metrics {
        jvm-metrics.enabled = yes
        reporters = [{
          type = prometheus
          address = 0.0.0.0
          port = ${CANTON_METRICS_PORT}
        }]
      }

      canton.monitoring.tracing {
        propagation = enabled
        tracer {
          exporter {
            type = otlp
            address = otel-collector
            port = ${OTEL_COLLECTOR_OTLP_PORT}
          }
        }
      }
  log_warning_if_party_hint_undefined: ${PARTY_HINT:?PARTY_HINT is required of format <company>-<role>-<number>}

  canton-healthcheck: &canton-healthcheck
    test: [ "CMD", "wget", "--quiet", "--tries=1", "--timeout=10", "http://localhost:${CANTON_HEALTHCHECK_PORT}/health" ]
    interval: 20s
    start_interval: 5s
    timeout: 30s
    retries: 10
    start_period: 20s

volumes:
  postgres:
  domain-upgrade-dump:

networks:
  quickstart:
    name: quickstart
    driver: bridge
  splice-sv-private:
    driver: bridge
  splice-sv-public:
    driver: bridge

services:
###############################################################################################################
### Common Services
###############################################################################################################
#  keycloak-postgres:
#    image: postgres:14
#    container_name: keycloak-postgres
#    environment:
#      POSTGRES_USER: keycloak
#      POSTGRES_PASSWORD: password
#      POSTGRES_DB: keycloakdb
#    volumes:
#      - postgres-keycloak:/var/lib/postgresql/data
#    networks:
#      - ${DOCKER_NETWORK:-splice_validator}

  nginx-keycloak:
    image: "nginx:${NGINX_VERSION}"
    container_name: nginx-keycloak
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/keycloak/keycloak.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8082:8082"
    depends_on:
      keycloak:
        condition: service_healthy
    # Workaround limitation of using localhost subdomains in QS. It is used only in backend-service
    # to configure frontend facing client otherwise the configuration would be quite difficult.
    networks:
      quickstart:
        aliases:
          - keycloak.localhost

  keycloak:
    image: quay.io/keycloak/keycloak:26.1.0
    container_name: keycloak
    volumes:
      - ${KEYCLOAK_IMPORT_DIR:-./docker/oauth/data}:/opt/keycloak/data/import
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_USERNAME: ${DB_USER}
      KC_DB_PASSWORD: ${DB_PASSWORD}
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloakdb
      KC_HEALTH_ENABLED: true
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/9000 && echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost:9000\r\nConnection: close\r\n\r\n' >&3 && cat <&3 | grep -q '200 OK'"]
      interval: 30s
      timeout: 10s
      retries: 50
    networks:
      - ${DOCKER_NETWORK:-splice_validator}
    command: ["start-dev", "--import-realm", "--http-port=8082", "--health-enabled=true", "--hostname-strict=false", "--proxy-headers=forwarded"]
###############################################################################################################
### Application User
###############################################################################################################
  nginx-app-user:
    image: "nginx:${NGINX_VERSION}"
    container_name: nginx-app-user
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/app-user/wallet.conf:/etc/nginx/conf.d/wallet.conf
    ports:
      - "${APP_USER_UI_PORT}:80"
    depends_on:
      - validator-app-provider
      - wallet-web-ui-app-user
    restart: always
    logging: *default-logging
    networks:
      - ${DOCKER_NETWORK}

  wallet-web-ui-app-user:
    extends:
      file: docker/compose-validator.yaml
      service: wallet-web-ui
    container_name: wallet-web-ui-app-user
    logging: *default-logging
    environment:
      - SPLICE_APP_UI_AUTH_AUDIENCE=${AUTH_APP_USER_AUDIENCE}
      - SPLICE_APP_UI_AUTH_CLIENT_ID=${AUTH_APP_USER_WALLET_UI_CLIENT_ID}
      - SPLICE_APP_UI_AUTH_URL=${AUTH_APP_USER_ISSUER_URL}
    networks:
      - ${DOCKER_NETWORK}

  validator-app-user-auto-config:
    build: ./docker/validator-app-user-auto-config/
    container_name: validator-app-user-auto-config
    volumes:
      - ./docker/validator-app-user-auto-config/health-check.sh:/app/health-check.sh
      - ./docker/validator-app-user-auto-config/onboarding.sh:/app/onboarding.sh
      - ./docker/utils.sh:/app/utils.sh
      - ./daml/licensing/.daml/dist/quickstart-licensing-0.0.1.dar:/canton/dars/quickstart-licensing-0.0.1.dar
      - ./daml/assets/.daml/dist/quickstart-assets-0.0.1.dar:/canton/dars/quickstart-assets-0.0.1.dar
    environment:
      - AUTH_APP_USER_VALIDATOR_USER_ID=${AUTH_APP_USER_VALIDATOR_USER_ID}
      - AUTH_APP_USER_VALIDATOR_USER_NAME=${AUTH_APP_USER_VALIDATOR_USER_NAME}
      - AUTH_APP_USER_VALIDATOR_CLIENT_ID=${AUTH_APP_USER_VALIDATOR_CLIENT_ID}
      - AUTH_APP_USER_VALIDATOR_CLIENT_SECRET=${AUTH_APP_USER_VALIDATOR_CLIENT_SECRET}
      - AUTH_APP_USER_WALLET_ADMIN_USER_ID=${AUTH_APP_USER_WALLET_ADMIN_USER_ID}
      - AUTH_APP_USER_WALLET_ADMIN_USER_NAME=${AUTH_APP_USER_WALLET_ADMIN_USER_NAME}
      - AUTH_APP_USER_WALLET_ADMIN_USER_PASSWORD=${AUTH_APP_USER_WALLET_ADMIN_USER_PASSWORD}
      - AUTH_APP_USER_TOKEN_URL=${AUTH_APP_USER_TOKEN_URL}
    healthcheck:
      test: ["CMD", "bash", "/app/health-check.sh"]
      interval: 5s
      timeout: 100s
      retries: 1000
      start_period: 300s
    entrypoint: [ "tail", "-f", "/dev/null" ]
    stdin_open: true
    tty: true
    depends_on:
      participant:
        condition: service_healthy
      validator-app-provider:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - ${DOCKER_NETWORK}

###############################################################################################################
### Application Provider
###############################################################################################################
  pqs:
    image: ${SCRIBE_IMAGE}:${SCRIBE_VERSION}
    container_name: pqs
    working_dir: /daml3.2
    environment:
      SCRIBE_SOURCE_LEDGER_HOST: "participant"
      SCRIBE_SOURCE_LEDGER_PORT: "3${PARTICIPANT_LEDGER_API_PORT}"
      SCRIBE_TARGET_POSTGRES_HOST: "${DB_SERVER}"
      SCRIBE_TARGET_POSTGRES_PORT: "${DB_PORT}"
      SCRIBE_TARGET_POSTGRES_USERNAME: "${DB_USER}"
      SCRIBE_TARGET_POSTGRES_PASSWORD: "${DB_PASSWORD}"
      SCRIBE_TARGET_POSTGRES_DATABASE: "scribe"
      SCRIBE_PIPELINE_OAUTH_CLIENTID: "${SCRIBE_PIPELINE_OAUTH_CLIENTID}"
      SCRIBE_PIPELINE_OAUTH_CLIENTSECRET: "${SCRIBE_PIPELINE_OAUTH_CLIENTSECRET}"
      SCRIBE_PIPELINE_OAUTH_SCOPE: "${SCRIBE_PIPELINE_OAUTH_SCOPE}"
      SCRIBE_PIPELINE_OAUTH_ENDPOINT: "${SCRIBE_PIPELINE_OAUTH_ENDPOINT}"
      SCRIBE_SOURCE_LEDGER_AUTH: "${SCRIBE_SOURCE_LEDGER_AUTH}"
      SCRIBE_PIPELINE_OAUTH_PARAMETERS_AUDIENCE: "${SCRIBE_PIPELINE_OAUTH_PARAMETERS_AUDIENCE}"
      OTEL_SERVICE_NAME: pqs
      OTEL_TRACES_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_METRIC_EXPORT_INTERVAL: 5000
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:${OTEL_COLLECTOR_OTLP_PORT}"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
      OTEL_INSTRUMENTATION_RUNTIME_TELEMETRY_EMIT_EXPERIMENTAL_TELEMETRY: true
    command:
      - "pipeline"
      - "ledger"
      - "postgres-document"
    depends_on:
      postgres:
        condition: service_healthy
      participant:
        condition: service_healthy
      validator-app-provider-auto-config:
        condition: service_healthy
    restart: on-failure:100
    networks:
      - ${DOCKER_NETWORK}

  backend-service:
    build:
      context: ./docker/backend-service
      args:
        JAVA_VERSION: ${JAVA_VERSION}
    container_name: backend-service
    working_dir: /app
    environment:
      LEDGER_HOST: "participant"
      LEDGER_PORT: "3${PARTICIPANT_LEDGER_API_PORT}"
      POSTGRES_HOST: "${DB_SERVER}"
      POSTGRES_DATABASE: "scribe"
      POSTGRES_USERNAME: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      OTEL_SERVICE_NAME: backend-service
      OTEL_TRACES_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_METRIC_EXPORT_INTERVAL: 5000
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:${OTEL_COLLECTOR_OTLP_PORT}"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      AUTH_APP_PROVIDER_BACKEND_CLIENT_ID: "${AUTH_APP_PROVIDER_BACKEND_CLIENT_ID}"
      AUTH_APP_PROVIDER_BACKEND_SECRET: "${AUTH_APP_PROVIDER_BACKEND_SECRET}"
      AUTH_APP_PROVIDER_BACKEND_USER_ID: "${AUTH_APP_PROVIDER_BACKEND_USER_ID}"
      AUTH_APP_PROVIDER_BACKEND_OIDC_CLIENT_ID: "${AUTH_APP_PROVIDER_BACKEND_OIDC_CLIENT_ID}"
      AUTH_APP_PROVIDER_ISSUER_URL: "${AUTH_APP_PROVIDER_ISSUER_URL}"
      AUTH_APP_PROVIDER_TOKEN_URL: "${AUTH_APP_PROVIDER_TOKEN_URL}"
      AUTH_APP_PROVIDER_VALIDATOR_USER_ID: "${AUTH_APP_PROVIDER_VALIDATOR_USER_ID}"
      AUTH_APP_PROVIDER_VALIDATOR_CLIENT_ID: "${AUTH_APP_PROVIDER_VALIDATOR_CLIENT_ID}"
      AUTH_APP_PROVIDER_VALIDATOR_CLIENT_SECRET: "${AUTH_APP_PROVIDER_VALIDATOR_CLIENT_SECRET}"
      JAVA_OPTS: "-javaagent:/otel-agent.jar -Dotel.instrumentation.logback-appender.experimental-log-attributes=true -Dotel.instrumentation.logback-appender.experimental.capture-key-value-pair-attributes=true"
    volumes:
      - ./backend/build/distributions/backend.tar:/backend.tar
      - ./backend/build/otel-agent/opentelemetry-javaagent-${OTEL_AGENT_VERSION}.jar:/otel-agent.jar
      - ./docker/utils.sh:/app/utils.sh
      - ./docker/backend-service/start.sh:/app/start.sh
    command: /app/start.sh
    ports:
      - "${BACKEND_PORT}:8080"
    depends_on:
      pqs:
        condition: service_started
      participant:
        condition: service_healthy
      validator-app-provider-auto-config:
        condition: service_healthy
    networks:
      - ${DOCKER_NETWORK}

  postgres:
    image: "postgres:${POSTGRES_VERSION}"
    container_name: postgres
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./docker/postgres/postgres-entrypoint.sh:/postgres-entrypoint.sh
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=postgres
      - CREATE_DATABASE_01=participant-app-provider
      - CREATE_DATABASE_02=validator-app-provider
      - CREATE_DATABASE_03=scribe
      - CREATE_DATABASE_04=participant-app-user
      - CREATE_DATABASE_05=validator-app-user
      - CREATE_DATABASE_06=participant-sv
      - CREATE_DATABASE_07=validator-sv
      - CREATE_DATABASE_08=sequencer
      - CREATE_DATABASE_09=mediator
      - CREATE_DATABASE_10=scan
      - CREATE_DATABASE_11=sv
      - CREATE_DATABASE_12=keycloakdb
    ports:
      - "${DB_PORT}:${DB_PORT}"
    entrypoint: /postgres-entrypoint.sh
    healthcheck:
      test: "pg_isready -U ${DB_USER} -d postgres"
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 60s
    user: "postgres"
    command:
      - postgres
      - -c
      - max_connections=1000
    logging: *default-logging
    networks:
      - ${DOCKER_NETWORK:-splice_validator}

  participant:
    image: "${IMAGE_REPO}canton-participant:${IMAGE_TAG}"
    env_file:
      - ./.env
    container_name: participant
    hostname: sequencer-mediator
    logging: *default-logging
    volumes:
      - ./docker/participant/app.conf:/app/app.conf
      - ./docker/participant/sv.conf:/app/sv.conf
    environment:
      - AUTH_JWKS_URL=${AUTH_APP_PROVIDER_JWK_SET_URL}
      - CANTON_PARTICIPANT_ADMIN_USER_NAME=${AUTH_APP_PROVIDER_VALIDATOR_USER_ID}
      - AUTH_TARGET_AUDIENCE=${AUTH_APP_PROVIDER_AUDIENCE}
      - *canton-metrics-config
    ports:
      - "4${PARTICIPANT_LEDGER_API_PORT}:4${PARTICIPANT_LEDGER_API_PORT}"
      - "4${PARTICIPANT_ADMIN_API_PORT}:4${PARTICIPANT_ADMIN_API_PORT}"
      - "4${PARTICIPANT_JSON_API_PORT}:4${PARTICIPANT_JSON_API_PORT}"  
      - "3${PARTICIPANT_LEDGER_API_PORT}:3${PARTICIPANT_LEDGER_API_PORT}"
      - "3${PARTICIPANT_ADMIN_API_PORT}:3${PARTICIPANT_ADMIN_API_PORT}"
      - "3${PARTICIPANT_JSON_API_PORT}:3${PARTICIPANT_JSON_API_PORT}"
      - "2${PARTICIPANT_LEDGER_API_PORT}:2${PARTICIPANT_LEDGER_API_PORT}"
      - "2${PARTICIPANT_ADMIN_API_PORT}:2${PARTICIPANT_ADMIN_API_PORT}"
      - "2${PARTICIPANT_JSON_API_PORT}:2${PARTICIPANT_JSON_API_PORT}"
    healthcheck: # KV make canton components healthcheck script
      test: ["CMD-SHELL", "grpcurl -plaintext localhost:2${CANTON_GRPC_HEALTHCHECK_PORT} grpc.health.v1.Health/Check && grpcurl -plaintext localhost:3${CANTON_GRPC_HEALTHCHECK_PORT} grpc.health.v1.Health/Check && grpcurl -plaintext localhost:4${CANTON_GRPC_HEALTHCHECK_PORT} grpc.health.v1.Health/Check || exit 1"]
      interval: 20s
      start_interval: 5s
      timeout: 30s
      retries: 10
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    restart: always
    networks:
      - ${DOCKER_NETWORK:-splice_validator}

  validator-app-provider:
    image: "${IMAGE_REPO}validator-app:${IMAGE_TAG}"
    container_name: validator-app-provider
    env_file:
      - ./.env
      - ./docker/localnet.env
      # KV solve this ^^^^^^
    volumes:
      - ./docker/validator/entrypoint.sh:/validator-entrypoint.sh
      - ./docker/validator/app.conf:/app/app.conf
      - ./docker/validator/sv.conf:/app/sv.conf
      - ./docker/validator/bootstrap.sc:/app/bootstrap.sc
      - domain-upgrade-dump:/domain-upgrade-dump
    entrypoint: /validator-entrypoint.sh
    logging: *default-logging
    healthcheck:
      test: [
        "CMD-SHELL",
# TODO readiness check will depend whether we are in devnet or localnet mode as sv components are not started in devnet
        "curl -f http://localhost:4${VALIDATOR_ADMIN_API_PORT}/api/validator/readyz && curl -f http://localhost:3${VALIDATOR_ADMIN_API_PORT}/api/validator/readyz && curl -f http://localhost:2${VALIDATOR_ADMIN_API_PORT}/api/validator/readyz && curl -f http://localhost:5012/api/scan/readyz && curl -f http://localhost:5014/api/sv/readyz || exit 1"
      ]
      interval: 20s
      start_interval: 5s
      timeout: 30s
      retries: 10
      start_period: 20s

    environment:
      - *canton-metrics-config
      - ONBOARDING_SECRET_URL=${ONBOARDING_SECRET_URL}
      - SPLICE_APP_VALIDATOR_SCAN_ADDRESS=${SCAN_ADDRESS}
      - SPLICE_APP_VALIDATOR_SV_SPONSOR_ADDRESS=${SPONSOR_SV_ADDRESS}
    ports:
      - "4${VALIDATOR_ADMIN_API_PORT}:4${VALIDATOR_ADMIN_API_PORT}"
      - "3${VALIDATOR_ADMIN_API_PORT}:3${VALIDATOR_ADMIN_API_PORT}"
      - "2${VALIDATOR_ADMIN_API_PORT}:2${VALIDATOR_ADMIN_API_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      participant:
        condition: service_healthy
    restart: always
    networks:
      - ${DOCKER_NETWORK}

  nginx-app-provider:
    image: "nginx:${NGINX_VERSION}"
    container_name: nginx-app-provider
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/dist/:/usr/share/nginx/html
      - ./config/nginx/app-provider/frontend.conf:/etc/nginx/conf.d/default.conf
      - ./config/nginx/app-provider/common-backend-proxy-settings.conf:/etc/nginx/common-backend-proxy-settings.conf
      - ./config/nginx/app-provider/wallet.conf:/etc/nginx/conf.d/wallet.conf
      - ./config/nginx/app-provider/swagger.conf:/etc/nginx/conf.d/swagger.conf
    ports:
      - "${APP_PROVIDER_UI_PORT}:80"
    depends_on:
      - backend-service
      - wallet-web-ui-app-provider
    restart: always
    logging: *default-logging
    networks:
      - ${DOCKER_NETWORK}

  wallet-web-ui-app-provider:
    extends:
      file: docker/compose-validator.yaml
      service: wallet-web-ui
    container_name: wallet-web-ui-app-provider
    logging: *default-logging
    environment:
      - SPLICE_APP_UI_AUTH_AUDIENCE=${AUTH_APP_PROVIDER_AUDIENCE}
      - SPLICE_APP_UI_AUTH_CLIENT_ID=${AUTH_APP_PROVIDER_WALLET_UI_CLIENT_ID}
      - SPLICE_APP_UI_AUTH_URL=${AUTH_APP_PROVIDER_ISSUER_URL}
    networks:
      - ${DOCKER_NETWORK}

  validator-app-provider-auto-config:
    build: ./docker/validator-app-provider-auto-config/
    container_name: validator-app-provider-auto-config
    volumes:
      - ./docker/validator-app-provider-auto-config/health-check.sh:/app/health-check.sh
      - ./docker/validator-app-provider-auto-config/onboarding.sh:/app/onboarding.sh
      - ./docker/utils.sh:/app/utils.sh
      - ./daml/licensing/.daml/dist/quickstart-licensing-0.0.1.dar:/canton/dars/quickstart-licensing-0.0.1.dar
      - ./daml/assets/.daml/dist/quickstart-assets-0.0.1.dar:/canton/dars/quickstart-assets-0.0.1.dar
    environment:
      - AUTH_APP_PROVIDER_VALIDATOR_USER_ID=${AUTH_APP_PROVIDER_VALIDATOR_USER_ID}
      - AUTH_APP_PROVIDER_VALIDATOR_USER_NAME=${AUTH_APP_PROVIDER_VALIDATOR_USER_NAME}
      - AUTH_APP_PROVIDER_VALIDATOR_CLIENT_ID=${AUTH_APP_PROVIDER_VALIDATOR_CLIENT_ID}
      - AUTH_APP_PROVIDER_VALIDATOR_CLIENT_SECRET=${AUTH_APP_PROVIDER_VALIDATOR_CLIENT_SECRET}
      - AUTH_APP_PROVIDER_PQS_USER_ID=${AUTH_APP_PROVIDER_PQS_USER_ID}
      - AUTH_APP_PROVIDER_PQS_USER_NAME=${AUTH_APP_PROVIDER_PQS_USER_NAME}
      - AUTH_APP_PROVIDER_WALLET_ADMIN_USER_ID=${AUTH_APP_PROVIDER_WALLET_ADMIN_USER_ID}
      - AUTH_APP_PROVIDER_WALLET_ADMIN_USER_NAME=${AUTH_APP_PROVIDER_WALLET_ADMIN_USER_NAME}
      - AUTH_APP_PROVIDER_BACKEND_USER_ID=${AUTH_APP_PROVIDER_BACKEND_USER_ID}
      - AUTH_APP_PROVIDER_BACKEND_USER_NAME=${AUTH_APP_PROVIDER_BACKEND_USER_NAME}
      - AUTH_APP_PROVIDER_TOKEN_URL=${AUTH_APP_PROVIDER_TOKEN_URL}
    healthcheck:
      test: ["CMD", "bash", "/app/health-check.sh"]
      interval: 5s
      timeout: 100s
      retries: 1000
      start_period: 300s
    entrypoint: [ "tail", "-f", "/dev/null" ]
    stdin_open: true
    tty: true
    depends_on:
      participant:
        condition: service_healthy
      validator-app-provider:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - ${DOCKER_NETWORK}

  backend-service-auto-config:
    build: ./docker/backend-service-auto-config/
    container_name: backend-service-auto-config
    volumes:
      - ./docker/backend-service-auto-config/health-check.sh:/app/health-check.sh
      - ./docker/backend-service-auto-config/onboarding.sh:/app/onboarding.sh
      - ./docker/utils.sh:/app/utils.sh
    environment:
      - AUTH_APP_PROVIDER_VALIDATOR_CLIENT_ID=${AUTH_APP_PROVIDER_VALIDATOR_CLIENT_ID}
      - AUTH_APP_PROVIDER_VALIDATOR_CLIENT_SECRET=${AUTH_APP_PROVIDER_VALIDATOR_CLIENT_SECRET}
      - AUTH_APP_PROVIDER_TOKEN_URL=${AUTH_APP_PROVIDER_TOKEN_URL}
      - AUTH_APP_PROVIDER_ISSUER_URL=${AUTH_APP_PROVIDER_ISSUER_URL}
      - AUTH_APP_USER_VALIDATOR_USER_ID=${AUTH_APP_USER_VALIDATOR_USER_ID}
      - AUTH_APP_USER_VALIDATOR_CLIENT_ID=${AUTH_APP_USER_VALIDATOR_CLIENT_ID}
      - AUTH_APP_USER_VALIDATOR_CLIENT_SECRET=${AUTH_APP_USER_VALIDATOR_CLIENT_SECRET}
      - AUTH_APP_USER_BACKEND_OIDC_CLIENT_ID=${AUTH_APP_USER_BACKEND_OIDC_CLIENT_ID}
      - AUTH_APP_USER_TOKEN_URL=${AUTH_APP_USER_TOKEN_URL}
      - AUTH_APP_USER_ISSUER_URL=${AUTH_APP_USER_ISSUER_URL}
    healthcheck:
      test: ["CMD", "bash", "/app/health-check.sh"]
      interval: 5s
      timeout: 100s
      retries: 1000
      start_period: 300s
    entrypoint: [ "tail", "-f", "/dev/null" ]
    stdin_open: true
    tty: true
    depends_on:
      backend-service:
        condition: service_started
      validator-app-user-auto-config:
        condition: service_healthy
    networks:
      - ${DOCKER_NETWORK}

###############################################################################################################
### SUPER VALIDATOR
###############################################################################################################

  nginx-sv:
    image: "nginx:${NGINX_VERSION}"
    container_name: nginx-sv
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sv-redirect.html:/usr/share/nginx/html/index.html
      - ./config/nginx/sv/default.conf:/etc/nginx/conf.d/default.conf
      - ./config/nginx/sv/sv.conf:/etc/nginx/conf.d/sv.conf
      - ./config/nginx/sv/scan.conf:/etc/nginx/conf.d/scan.conf
      - ./config/nginx/sv/wallet.conf:/etc/nginx/conf.d/wallet.conf
    ports:
      - "${SV_UI_PORT}:80"
    depends_on:
      - validator-app-provider
      - wallet-web-ui-sv
    restart: always
    logging: *default-logging
    networks:
      - ${DOCKER_NETWORK}
    profiles:
      - localnet

  wallet-web-ui-sv:
    extends:
      file: docker/compose-super-validator.yaml
      service: wallet-web-ui
    container_name: wallet-web-ui-sv
    logging: *default-logging
    networks:
      - ${DOCKER_NETWORK}

  sv-web-ui:
    extends:
      file: docker/compose-super-validator.yaml
      service: sv-web-ui
    container_name: sv-web-ui
    logging: *default-logging
    networks:
      - ${DOCKER_NETWORK}
    profiles:
      - localnet

  scan-web-ui:
    extends:
      file: docker/compose-super-validator.yaml
      service: scan-web-ui
    container_name: scan-web-ui
    logging: *default-logging
    networks:
      - ${DOCKER_NETWORK}
    profiles:
      - localnet
