openapi: 3.0.0
info:
  title: Backend API
  description: API to manage AppInstalls and Licenses
  version: 1.0.0

paths:
  /feature-flags:
    get:
      summary: Get feature flags
      operationId: getFeatureFlags
      responses:
        '200':
          description: A list of feature flags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlags'
        '400':
          description: Invalid request
  /login-links:
    get:
      summary: Get list of links that initiate login
      operationId: listLinks
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoginLink'
        '400':
          description: Invalid input

  /user:
    get:
      summary: Get Authenticated User
      operationId: getAuthenticatedUser
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUser'
        '401':
          description: Not authenticated

  /admin/tenant-registrations:
    post:
      summary: Create Tenant Registration
      operationId: createTenantRegistration
      requestBody:
        description: Tenant Registration object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantRegistrationRequest'
      responses:
        '200':
          description: Registration created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantRegistration'
        '400':
          description: Invalid input

    get:
      summary: List all Tenant Registrations
      operationId: listTenantRegistrations
      responses:
        '200':
          description: A list of Tenant Registrations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantRegistration'
        '400':
          description: Invalid request

  /admin/tenant-registrations/{tenantId}:
    delete:
      summary: Delete Tenant Registration
      operationId: deleteTenantRegistration
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
          description: The tenant ID of the registration to delete
      responses:
        '200':
          description: Tenant Registration deleted
        '400':
          description: Invalid tenant ID
        '404':
          description: Tenant Registration not found

  /app-install-requests:
    get:
      summary: List all AppInstallRequests
      operationId: listAppInstallRequests
      responses:
        '200':
          description: A list of AppInstallRequests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppInstallRequest'
        '400':
          description: Invalid input

  /app-install-requests/{contractId}/accept:
    post:
      summary: Accept an AppInstallRequest
      operationId: acceptAppInstallRequest
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string
          description: The contract ID of the AppInstallRequest to accept
        - name: commandId
          in: query
          required: true
          schema:
            type: string
          description: The command ID for the ledger transaction
      requestBody:
        description: Acceptance parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppInstallRequestAccept'
      responses:
        '200':
          description: AppInstall created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppInstall'
        '400':
          description: Invalid input

  /app-install-requests/{contractId}/reject:
    post:
      summary: Reject an AppInstallRequest
      operationId: rejectAppInstallRequest
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string
          description: The contract ID of the AppInstallRequest to reject
        - name: commandId
          in: query
          required: true
          schema:
            type: string
          description: The command ID for the ledger transaction
      requestBody:
        description: Rejection parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppInstallRequestReject'
      responses:
        '200':
          description: AppInstallRequest rejected
        '400':
          description: Invalid input

  /app-installs/{contractId}/create-license:
    post:
      summary: Create a License using the AppInstall
      operationId: createLicense
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string
          description: The contract ID of the AppInstall to use
        - name: commandId
          in: query
          required: true
          schema:
            type: string
          description: The command ID for the ledger transaction
      requestBody:
        description: License creation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppInstallCreateLicenseRequest'
      responses:
        '200':
          description: License created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppInstallCreateLicenseResult'
        '400':
          description: Invalid input

  /app-installs/{contractId}/cancel:
    post:
      summary: Cancel an AppInstall
      operationId: cancelAppInstall
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string
          description: The contract ID of the AppInstall to cancel
        - name: commandId
          in: query
          required: true
          schema:
            type: string
          description: The command ID for the ledger transaction
      requestBody:
        description: Cancellation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppInstallCancel'
      responses:
        '200':
          description: AppInstall canceled
        '400':
          description: Invalid input

  /app-installs:
    get:
      summary: List all AppInstalls
      operationId: listAppInstalls
      responses:
        '200':
          description: A list of AppInstalls
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppInstall'
        '400':
          description: Invalid input

  /licenses:
    get:
      summary: List all Licenses (including renewal requests)
      operationId: listLicenses
      responses:
        '200':
          description: A list of Licenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/License'
        '400':
          description: Invalid input

  /licenses/{contractId}/renew:
    post:
      summary: Renew a License
      operationId: renewLicense
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string
          description: The contract ID of the License to renew
        - name: commandId
          in: query
          required: true
          schema:
            type: string
          description: The command ID for the ledger transaction
      requestBody:
        description: License renewal parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseRenewRequest'
      responses:
        '200':
          description: Renewal offer and payment request created
        '400':
          description: Invalid input

  /licenses/{contractId}/complete-renewal:
    post:
      summary: Complete the License Renewal
      operationId: completeLicenseRenewal
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string
        - name: commandId
          in: query
          required: true
          schema:
            type: string
          description: The command ID for the ledger transaction
      requestBody:
        description: Complete license renewal parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteLicenseRenewalRequest'
      responses:
        '200':
          description: License renewed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseRenewalResult'
        '400':
          description: Invalid input
        '404':
          description: No matching contract found

  /licenses/{contractId}/expire:
    post:
      summary: Expire a License
      operationId: expireLicense
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string
          description: The contract ID of the License to expire
        - name: commandId
          in: query
          required: true
          schema:
            type: string
          description: The command ID for the ledger transaction
      requestBody:
        description: Expiration parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseExpireRequest'
      responses:
        '200':
          description: License expired
          content:
            text/plain:
              schema:
                type: string
                nullable: true
        '400':
          description: Invalid input
          content:
            text/plain:
              schema:
                type: string
                nullable: true
        '412':
          description: License is not expirable
          content:
            text/plain:
              schema:
                type: string
                nullable: true
        '500':
          description: An internal server error occurred
          content:
            text/plain:
              schema:
                type: string
                nullable: true

  /license-renewal-requests/{contractId}/withdraw:
    post:
      summary: Withdraw an LicenseRenewalRequest
      operationId: withdrawLicenseRenewalRequest
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string
          description: The contract ID of the LicenseRenewalRequest to withdraw
        - name: commandId
          in: query
          required: true
          schema:
            type: string
          description: The command ID for the ledger transaction
      responses:
        '200':
          description: LicenseRenewalRequest withdrawn
        '400':
          description: Invalid input

components:
  schemas:
    TenantRegistrationRequest:
      type: object
      required:
        - tenantId
        - partyId
        - walletUrl
      properties:
        tenantId:
          type: string
        partyId:
          type: string
        walletUrl:
          type: string
        clientId:
          type: string
        issuerUrl:
          type: string
        internal:
          type: boolean
        users:
          type: array
          items:
            type: string

    TenantRegistration:
      type: object
      required:
        - tenantId
        - partyId
        - walletUrl
        - internal
      properties:
        tenantId:
          type: string
          description: Tenant identifier
        partyId:
          type: string
          description: Party identifier
        walletUrl:
          type: string
          description: Wallet URL for payment redirects
          format: uri
        clientId:
          type: string
          description: OAuth2 client identifier
        issuerUrl:
          type: string
          description: Issuer URL
          format: uri
        internal:
          type: boolean
          description: Internal registration
        users:
          type: array
          items:
            type: string
    AuthenticatedUser:
      type: object
      required:
        - name
        - party
        - roles
        - isAdmin
        - walletUrl
      properties:
        name:
          type: string
        party:
          type: string
        roles:
          type: array
          items:
            type: string
        isAdmin:
          type: boolean
        walletUrl:
          type: string

    LoginLink:
      type: object
      required:
        - name
        - url
      properties:
        name:
          type: string
        url:
          type: string

    AppInstallRequest:
      type: object
      required:
        - contractId
        - provider
        - user
        - meta
      properties:
        contractId:
          type: string
        provider:
          type: string
        user:
          type: string
        meta:
          $ref: '#/components/schemas/Metadata'

    AppInstallRequestAccept:
      type: object
      required:
        - installMeta
        - meta
      properties:
        installMeta:
          $ref: '#/components/schemas/Metadata'
        meta:
          $ref: '#/components/schemas/Metadata'

    AppInstallRequestReject:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: '#/components/schemas/Metadata'

    AppInstallRequestCancel:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: '#/components/schemas/Metadata'

    AppInstall:
      type: object
      required:
        - contractId
        - provider
        - user
        - meta
        - numLicensesCreated
        - licenseNum
      properties:
        contractId:
          type: string
        provider:
          type: string
        user:
          type: string
        meta:
          $ref: '#/components/schemas/Metadata'
        numLicensesCreated:
          type: integer
        licenseNum:
          type: integer

    AppInstallCreateLicenseRequest:
      type: object
      required:
        - params
      properties:
        params:
          $ref: '#/components/schemas/LicenseParams'

    AppInstallCreateLicenseResult:
      type: object
      properties:
        installId:
          type: string
        licenseId:
          type: string

    AppInstallCancel:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: '#/components/schemas/Metadata'

    LicenseParams:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Metadata'

    License:
      type: object
      required:
        - contractId
        - provider
        - user
        - params
        - expiresAt
        - licenseNum
        - isExpired
      properties:
        contractId:
          type: string
        provider:
          type: string
        user:
          type: string
        params:
          $ref: '#/components/schemas/LicenseParams'
        expiresAt:
          type: string
          format: date-time
        licenseNum:
          type: integer
        isExpired:
          type: boolean
        renewalRequests:
          type: array
          items:
            $ref: '#/components/schemas/LicenseRenewalRequest'

    Metadata:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            type: string

    LicenseRenewRequest:
      type: object
      description: Parameters used to initiate a license renewal.
      required:
        - licenseFeeCc
        - licenseExtensionDuration
        - prepareUntilDuration
        - settleBeforeDuration
        - description
      properties:
        licenseFeeCc:
          type: number
          description: License fee amount
        licenseExtensionDuration:
          type: string
          description: "ISO-8601 duration specifying the requested extension period (e.g. 'P30D' for 30 days)."
        prepareUntilDuration:
          type: string
          description: "ISO-8601 duration after which the allocation request will be not accepted."
        settleBeforeDuration:
          type: string
          description: "ISO-8601 duration within which the transfer must be settled."
        description:
          type: string
          description: Human-readable explanation of the renewal request.

    LicenseRenewalResult:
      type: object
      properties:
        licenseId:
          type: string

    LicenseRenewalRequest:
      type: object
      required:
          - contractId
          - provider
          - user
          - licenseNum
          - licenseFeeAmount
          - licenseFeeInstrument
          - licenseExtensionDuration
          - prepareUntil
          - settleBefore
          - requestedAt
          - description
          - requestId
          - prepareDeadlinePassed
          - settleDeadlinePassed
      properties:
        contractId:
          type: string
        provider:
          type: string
        user:
          type: string
        licenseNum:
          type: integer
        licenseFeeAmount:
          type: number
        licenseFeeInstrument:
          type: string
        licenseExtensionDuration:
          type: string
          description: "RelTime representing how long the license should be extended."
        prepareUntil:
            type: string
            format: date-time
            description: "The time until the license renewal request can be prepared."
        settleBefore:
            type: string
            format: date-time
            description: "The time before which the payment must be settled."
        requestedAt :
          type: string
          format: date-time
          description: "The time until the license renewal request can be prepared."
        description:
          type: string
        requestId:
          type: string
        allocationCid:
          type: string
        prepareDeadlinePassed:
          type: boolean
        settleDeadlinePassed:
          type: boolean

    LicenseExpireRequest:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: '#/components/schemas/Metadata'

    CompleteLicenseRenewalRequest:
      type: object
      required:
        - renewalRequestContractId
        - allocationContractId
      properties:
        renewalRequestContractId:
          type: string
          description: The contract ID of the LicenseRenewalRequest to complete
        allocationContractId:
          type: string
          description: The contract ID of the accepted allocation

    FeatureFlags:
      type: object
      properties:
        authMode:
          type: string
          enum:
            - oauth2
            - shared-secret
