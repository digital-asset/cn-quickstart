# Redirect any calls to `localhost` to `app-provider.localhost`
server {
    listen ${APP_PROVIDER_UI_PORT};
    server_name localhost;

    if ($http_host ~* "^(?<domain>[^:]+)(?::(?<port>\d+))?$") {
        set $original_port $port;
    }

    # If the clientâ€™s Host header included a port, use it in the redirect
    if ($original_port) {
        return 301 $scheme://app-provider.localhost:$original_port$request_uri;
    }
    
    return 301 $scheme://app-provider.localhost$request_uri;
}

# Main server block
server {
    listen ${APP_PROVIDER_UI_PORT};
    server_name app-provider.localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Status endpoint for observability
    location = /status {
        stub_status;
    }

    # Reverse proxy for /api/** to http://backend-service:8080
    location /api/ {
        proxy_pass http://backend-service:${BACKEND_PORT};
        include /etc/nginx/conf.d/common-backend-proxy-settings.conf;

        # Remove /api from the forwarded URL
        rewrite ^/api(/.*)$ $1 break;
    }

    # Reverse proxy for /login/oauth2 to http://backend-service:8080/login/oauth2
    location /login/oauth2 {
        proxy_pass http://backend-service:${BACKEND_PORT}/login/oauth2;
        include /etc/nginx/conf.d/common-backend-proxy-settings.conf;
    }

    # Reverse proxy for /oauth2/** to http://backend-service:8080/oauth2/
    location /oauth2/ {
        proxy_pass http://backend-service:${BACKEND_PORT}/oauth2/;
        include /etc/nginx/conf.d/common-backend-proxy-settings.conf;
    }

    location = /oauth2 { # /oauth2 is also a SPA page. TODO: Move /oauth2/ endpoints to /api/parent and remove this
        try_files $uri /index.html;
    }

    # Serve static files and fallback to index.html for SPA routes
    location / {
        try_files $uri /index.html;
    }

    client_max_body_size 10M;
    keepalive_timeout 65;
}
