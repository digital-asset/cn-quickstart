_sv_participant_client {
  admin-api {
    address = canton
    port = 4${PARTICIPANT_ADMIN_API_PORT}
  }
  ledger-api {
    client-config {
      address = canton
      port = 4${PARTICIPANT_LEDGER_API_PORT}
    }
    auth-config.type = "none"
  }
}

_splice-instance-names {
  network-name = ${SPLICE_APP_UI_NETWORK_NAME}
  network-favicon-url = ${SPLICE_APP_UI_NETWORK_FAVICON_URL}
  amulet-name = ${SPLICE_APP_UI_AMULET_NAME}
  amulet-name-acronym = ${SPLICE_APP_UI_AMULET_NAME_ACRONYM}
  name-service-name = ${SPLICE_APP_UI_NAME_SERVICE_NAME}
  name-service-name-acronym = ${SPLICE_APP_UI_NAME_SERVICE_NAME_ACRONYM}
}

canton.validator-apps.sv-validator_backend = ${_validator_backend} {
  canton-identifier-config.participant = sv
  onboarding = null
  scan-client = null
  scan-client = {
    type = "trust-single"
    url="http://localhost:5012"
  }
  sv-user=administrator
  sv-validator=true
  storage.config.properties.databaseName = validator-sv
  admin-api.port = 4${VALIDATOR_ADMIN_API_PORT}
  participant-client = ${_sv_participant_client}
  ledger-api-user = administrator
  validator-wallet-users.0 = administrator
  auth {
    algorithm="hs-256-unsafe"
    audience=${SPLICE_APP_VALIDATOR_AUTH_AUDIENCE}
    secret="unsafe"
  }
}

canton.scan-apps.scan-app {
  is-first-sv = true
  domain-migration-id = 0
  storage = ${_storage} {
    config.properties {
      databaseName = scan
      currentSchema = scan
    }
  }

  admin-api = {
    address = "0.0.0.0"
    port = 5012
  }
  participant-client = ${_sv_participant_client}
  sequencer-admin-client = {
    address = sequencer-mediator # TODO global synchronizer => participant => canton
    port = 5009
  }
  sv-user = administrator
  splice-instance-names = ${_splice-instance-names}
}

_onboarding {
  type = found-dso
  name = sv
  first-sv-reward-weight-bps = 10000
  round-zero-duration = ${?SPLICE_APP_SV_ROUND_ZERO_DURATION}
  initial-tick-duration = ${?SPLICE_APP_SV_INITIAL_TICK_DURATION}
  initial-holding-fee = ${?SPLICE_APP_SV_INITIAL_HOLDING_FEE}
  initial-amulet-price = ${?SPLICE_APP_SV_INITIAL_AMULET_PRICE}
  is-dev-net = ${?SPLICE_SV_IS_DEVNET}
  public-key = ${?SPLICE_APP_SV_PUBLIC_KEY}
  private-key = ${?SPLICE_APP_SV_PRIVATE_KEY}
}

_comet_bft_config {
  enabled = false
  enabled = ${?SPLICE_APP_SV_COMETBFT_ENABLED}
  connection-uri = ""
  connection-uri = ${?SPLICE_APP_SV_COMETBFT_CONNECTION_URI}
}

canton {
  sv-apps {
    sv {
      domain-migration-id = 0
      expected-validator-onboardings = [
        { secret = ${APP_PROVIDER_VALIDATOR_ONBOARDING_SECRET} },
        { secret = ${APP_USER_VALIDATOR_ONBOARDING_SECRET} }
      ]
      scan {
        public-url="http://localhost:5012"
        internal-url="http://localhost:5012"
      }
      local-synchronizer-node {
        sequencer {
          admin-api {
            address = canton
            port = 5009
          }
          internal-api {
            address = canton
            port = 5008
          }
          external-public-api-url = "http://canton:5008"
        }
        mediator {
          admin-api {
            address = canton
            port = 5007
          }
        }
      }

      storage = ${_storage} {
        config.properties {
          databaseName = sv
          currentSchema = sv
        }
      }

      admin-api = {
        address = "0.0.0.0"
        port = 5014
      }
      participant-client = ${_sv_participant_client}
      ledger-api-user = administrator
      validator-ledger-api-user = administrator
      auth={
        algorithm = "hs-256-unsafe"
        audience = "${SPLICE_APP_VALIDATOR_AUTH_AUDIENCE}"
        secret = "unsafe"
      }
      domains {
        global {
          alias = "global"
          url = ${?SPLICE_APP_SV_GLOBAL_DOMAIN_URL}
        }
      }

      automation {
        # TODO(#7649) revise and/or remove
        enable-dso-delegate-replacement-trigger = true
        paused-triggers = [
          "org.lfdecentralizedtrust.splice.automation.AssignTrigger",
          "org.lfdecentralizedtrust.splice.automation.AmuletConfigReassignmentTrigger",
          "org.lfdecentralizedtrust.splice.automation.TransferFollowTrigger",
          "org.lfdecentralizedtrust.splice.sv.automation.delegatebased.ExpiredAmuletTrigger",
          "org.lfdecentralizedtrust.splice.sv.automation.delegatebased.ExpiredLockedAmuletTrigger",
          "org.lfdecentralizedtrust.splice.sv.automation.delegatebased.ExpiredAnsSubscriptionTrigger"
          "org.lfdecentralizedtrust.splice.sv.automation.delegatebased.ExpiredAnsEntryTrigger",
          "org.lfdecentralizedtrust.splice.sv.automation.delegatebased.ExpireTransferPreapprovalsTrigger",
        ]
      }

      onboarding = ${_onboarding}
      initial-amulet-price-vote = ${?SPLICE_APP_SV_INITIAL_AMULET_PRICE_VOTE}
      comet-bft-config = ${_comet_bft_config}
      contact-point = ""
      contact-point = ${?SPLICE_APP_CONTACT_POINT}
      canton-identifier-config = {
        participant = sv
        sequencer = sv
        mediator = sv
      }

      splice-instance-names = ${_splice-instance-names}
    }
  }
  features.enable-testing-commands = yes

}